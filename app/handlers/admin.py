# app/handlers/admin.py
from aiogram import Router
from aiogram.filters import BaseFilter, Command, CommandObject
from aiogram.types import Message
from config import ADMIN_ID
from app.utils.logger import logger
from app.services.facemint_service import FacemintService, FacemintError
import json

# 1. –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == ADMIN_ID

# 2. –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –í–°–ï–• —Å–≤–æ–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
router = Router()
router.message.filter(IsAdmin())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
facemint_service = FacemintService()

# 3. –°–æ–∑–¥–∞—ë–º "–ø—Ä–æ–±–Ω—É—é" –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

@router.message(Command("test_faces"))
async def cmd_test_faces(message: Message, command: CommandObject):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü.
    –ü—Ä–∏–º–µ—Ä: /test_faces https://example.com/image.jpg
    """
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                             "–ü—Ä–∏–º–µ—Ä: `/test_faces https://example.com/image.jpg`")
        return

    url = command.args
    await message.answer(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü –¥–ª—è URL:\n{url}")
    
    try:
        logger.debug(f"Admin command /test_faces called with url: {url}")
        result = await facemint_service.faces_from_url(url)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        pretty_result = json.dumps(result, indent=2, ensure_ascii=False)
        
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:\n<pre>{pretty_result[:3000]}</pre>", parse_mode="HTML")

    except FacemintError as e:
        logger.error(f"Admin command /test_faces failed: {e}")
        await message.answer(f"üî• –û—à–∏–±–∫–∞ API Facemint:\n`{str(e)[:1000]}`")
    except Exception as e:
        logger.error(f"Unexpected error in /test_faces: {e}")
        await message.answer(f"ü§Ø –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n`{str(e)[:1000]}`")


@router.message(Command("test_status"))
async def cmd_test_status(message: Message, command: CommandObject):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.
    –ü—Ä–∏–º–µ—Ä: /test_status mock_task_123
    """
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                             "–ü—Ä–∏–º–µ—Ä: `/test_status mock_task_123`")
        return

    task_id = command.args
    await message.answer(f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ `{task_id}`...")

    try:
        result = await facemint_service.get_task_info(task_id)
        pretty_result = json.dumps(result, indent=2, ensure_ascii=False)
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:\n<pre>{pretty_result}</pre>", parse_mode="HTML")

    except FacemintError as e:
        await message.answer(f"üî• –û—à–∏–±–∫–∞ API Facemint:\n`{str(e)[:1000]}`")
    except Exception as e:
        await message.answer(f"ü§Ø –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n`{str(e)[:1000]}`")


@router.message(Command("test_task"))
async def cmd_test_task(message: Message, command: CommandObject):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
    –ü—Ä–∏–º–µ—Ä: /test_task <media_url> <face_url>
    """
    if not command.args or len(command.args.split()) != 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ URL –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: media_url –∏ face_url.\n"
                             "–ü—Ä–∏–º–µ—Ä: `/test_task url1 url2`")
        return

    media_url, face_url = command.args.split()
    await message.answer(f"‚è≥ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...")

    try:
        # –í–ê–ñ–ù–û: payload –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API Facemint
        payload = {
            "type": "gif",
            "media_url": media_url,
            "callback_url": "https://example.com/callback",  # API —Ç—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—ã–π URL, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            "swap_list": [
                {
                    # from_face –æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω—è—Ç—å –≤—Å–µ –ª–∏—Ü–∞ –≤ –º–µ–¥–∏–∞
                    "to_face": face_url
                }
            ]
        }
        result = await facemint_service.create_face_swap_task(payload)
        pretty_result = json.dumps(result, indent=2, ensure_ascii=False)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:\n<pre>{pretty_result[:3000]}</pre>", parse_mode="HTML")

    except FacemintError as e:
        await message.answer(f"üî• –û—à–∏–±–∫–∞ API Facemint:\n`{str(e)[:1000]}`")
    except Exception as e:
        await message.answer(f"ü§Ø –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n`{str(e)[:1000]}`")


logger.info("–ê–¥–º–∏–Ω-—Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
