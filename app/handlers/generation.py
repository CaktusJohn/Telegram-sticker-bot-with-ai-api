from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from app.keyboards.main import get_categories_keyboard, get_template_navigation_keyboard
from app.states.user_states import UserStates
from app.utils.logger import logger

router = Router()

# ... (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-–ø–ª–∞–Ω—ã)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@router.callback_query(F.data.startswith("cat_page_"), StateFilter(UserStates.selecting_category))
async def handle_category_pagination(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await callback.message.edit_reply_markup(
        reply_markup=get_categories_keyboard(page=page)
    )
    await callback.answer()


# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤
STICKER_PACKS = {
    "üé¨ –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã": "NBstickeriaBrat",
    "üé≠ –ú–µ–º—ã –∏ –ø—Ä–∏–∫–æ–ª—ã": "MemeS1ick3r",
    "üíº –†–∞–±–æ—Ç–∞ –∏ –æ—Ñ–∏—Å": "PutInPacky",
}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.callback_query(F.data.startswith("cat_select_"), StateFilter(UserStates.selecting_category))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    print(f"DEBUG: handle_category_selection triggered! Current state: {await state.get_state()}") # Debug print
    category_name = callback.data.replace("cat_select_", "")
    pack_name = STICKER_PACKS.get(category_name)

    if not pack_name:
        await callback.answer("–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
        return

    await callback.message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'...")

    try:
        # Final solution: Create a dedicated aiohttp session to make a raw request,
        # completely bypassing any aiogram models or session internals.
        import aiohttp
        from aiogram.types import Sticker

        api_url = f"https://api.telegram.org/bot{callback.bot.token}/getStickerSet"
        payload = {"name": pack_name}
        
        async with aiohttp.ClientSession() as http_session:
            async with http_session.post(api_url, json=payload) as response:
                response.raise_for_status() # Raise an exception for bad status codes (4xx or 5xx)
                sticker_set_dict = await response.json()

        if not sticker_set_dict.get('ok'):
            raise Exception(f"Telegram API error: {sticker_set_dict.get('description')}")

        # Manually parse the dictionary to get the list of sticker data
        stickers_data = sticker_set_dict.get('result', {}).get('stickers', [])

        if not stickers_data:
            await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.")
            return

        # Convert the raw sticker dicts into aiogram Sticker objects
        stickers = [Sticker(**sticker_data) for sticker_data in stickers_data]
        
        await state.update_data(
            templates=[s.file_id for s in stickers],
            template_page=0,
            current_category=category_name
        )
        await state.set_state(UserStates.selecting_template)

        await callback.message.delete()
        await callback.message.answer_sticker(
            sticker=stickers[0].file_id,
            reply_markup=get_template_navigation_keyboard(
                page=0,
                total_pages=len(stickers),
                category_id=category_name
            )
        )

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ {pack_name}: {e}")
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω–∞–º ---

@router.callback_query(F.data == "back_to_categories", StateFilter(UserStates.selecting_template))
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.selecting_category)
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤:",
        reply_markup=get_categories_keyboard(page=0)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("tpl_page_"), StateFilter(UserStates.selecting_template))
async def handle_template_selection(callback: CallbackQuery, state: FSMContext):
    print(f"DEBUG: handle_template_selection callback received! Current state: {await state.get_state()}") # Debug print
    print(f"DEBUG: handle_template_pagination triggered! Current state: {await state.get_state()}") # Debug print
    page = int(callback.data.split("_")[-1])
    
    data = await state.get_data()
    templates = data.get("templates", [])
    current_category = data.get("current_category", "")
    
    if not templates:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    new_sticker_id = templates[page]
    
    new_keyboard = get_template_navigation_keyboard(
        page=page,
        total_pages=len(templates),
        category_id=current_category
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º
    await callback.message.delete()

    # –ü—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer_sticker(
        sticker=new_sticker_id,
        reply_markup=new_keyboard
    )

    await state.update_data(template_page=page) # Update the page in state
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–´–ë–û–†–ê —à–∞–±–ª–æ–Ω–∞ ---
@router.callback_query(F.data.startswith("tpl_select_"), StateFilter(UserStates.selecting_template))
async def handle_template_confirm(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω".
    """
    data = await state.get_data()
    templates = data.get("templates", [])
    page = data.get("template_page", 0)
    
    if not templates:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    selected_template_id = templates[page]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ FSM
    await state.update_data(selected_template_id=selected_template_id)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await state.set_state(UserStates.waiting_photo)
    
    await callback.message.delete()
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ —Ñ–∞–π–ª–æ–º (–Ω–µ —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)."
    )
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞) ---
@router.message(F.document, StateFilter(UserStates.waiting_photo))
async def handle_photo_upload(message: Message, state: FSMContext):
    import os
    import json
    # 1Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from app.utils.file_handler import download_user_photo, validate_image
    file_path = await download_user_photo(message.document, message.from_user.id)

    # 2Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    valid, error = await validate_image(file_path)
    if not valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        return

    await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ...")

    # 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    from config import MEDIA_HOST
    user_id = message.from_user.id
    filename = os.path.basename(file_path)
    image_url = f"{MEDIA_HOST}/media/{user_id}/{filename}"
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è —Ñ–æ—Ç–æ: {image_url}")

    # 4Ô∏è‚É£ –í—ã–∑–æ–≤ Facemint API –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü
    from app.services.facemint_service import FacemintService
    facemint_service = FacemintService()
    result = await facemint_service.faces_from_url(image_url)

    if result.get('code') != 0:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    faces_count = result.get('data', {}).get('count', 0)

    if faces_count == 0:
        await message.answer("‚ùå –õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–æ –≤–∏–¥–∏–º—ã–º –ª–∏—Ü–æ–º.")
        return

    # 5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    from app.database.models import add_face_detection
    from datetime import datetime
    await add_face_detection(
        user_id=message.from_user.id,
        file_path=file_path,
        faces_count=faces_count,
        faces_data=json.dumps(result.get('data', {}).get('faces', [])),
        created_at=datetime.utcnow()
    )

    meta_path = os.path.join(os.path.dirname(file_path), "meta.json")
    meta = {
        "original_path": file_path,
        "faces_detected": True,
        "faces_count": faces_count,
        "faces_data": result.get('data', {}).get('faces', []),
        "created_at": datetime.utcnow().isoformat()
    }
    with open(meta_path, "w", encoding="utf-8") as f:
        json.dump(meta, f, ensure_ascii=False, indent=2)

    # 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.update_data(user_photo_path=file_path)
    
    # 7Ô∏è‚É£ –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    # (–≠—Ç–æ—Ç —à–∞–≥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
    await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    # TODO: –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å
    await state.clear() # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏