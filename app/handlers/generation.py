import asyncio
from aiogram import Router, F
import os
import json
from aiogram.types import Document, Message
from aiogram.fsm.context import FSMContext
from app.services.facemint_service import FacemintService
from app.utils.file_handler import download_user_photo, validate_image
from app.database.models import add_face_detection
from app.states.user_states import UserStates
from datetime import datetime
from app.utils.logger import logger
from aiogram.filters import StateFilter

facemint_service = FacemintService()
router = Router()



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ---
@router.message(F.document, StateFilter(UserStates.waiting_photo))
async def handle_photo_upload(message: Message, state: FSMContext):
    # 1Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    file_path = await download_user_photo(message.document, message.from_user.id)

    # 2Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    valid, error = await validate_image(file_path)
    if not valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        return

    await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ...")

    # 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —á–µ—Ä–µ–∑ Nginx
    filename = os.path.basename(file_path)
    image_url = f"http://195.133.25.216/media/{filename}"
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è —Ñ–æ—Ç–æ: {image_url}")

    # 4Ô∏è‚É£ –í—ã–∑–æ–≤ Facemint API –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü
    result = await facemint_service.faces_from_url(image_url)

    if result['code'] != 0:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    faces_count = result['data']['count']
    faces_data = result['data']['faces']

    if faces_count == 0:
        await message.answer("‚ùå –õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–æ –≤–∏–¥–∏–º—ã–º –ª–∏—Ü–æ–º.")
        return

    # 5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
    await add_face_detection(
        user_id=message.from_user.id,
        file_path=file_path,
        faces_count=faces_count,
        faces_data=json.dumps(faces_data),
        created_at=datetime.utcnow()
    )

    # 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON
    meta_path = os.path.join(os.path.dirname(file_path), "meta.json")
    meta = {
        "original_path": file_path,
        "faces_detected": True,
        "faces_count": faces_count,
        "faces_data": faces_data,
        "created_at": datetime.utcnow().isoformat()
    }
    with open(meta_path, "w", encoding="utf-8") as f:
        json.dump(meta, f, ensure_ascii=False, indent=2)

    # 7Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UserStates.photo_validated)
    await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞.")

